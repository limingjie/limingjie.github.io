<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Mingjie Li</title>
    <link>https://limingjie.github.io/tags/golang/</link>
    <description>Recent content in Golang on Mingjie Li</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 Feb 2020 23:00:00 +0800</lastBuildDate><atom:link href="https://limingjie.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Multiply Big Numbers</title>
      <link>https://limingjie.github.io/posts/2020-02-24-multiply-big-numbers/</link>
      <pubDate>Mon, 24 Feb 2020 23:00:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2020-02-24-multiply-big-numbers/</guid>
      <description>Multiply Strings I answered this LeetCode question many years ago and got a successful submission with a not too bad score.
Some code like this, I tried to make it easy to understand, well it might sacrifice some performance. The code takes less than 1s to calculate 10,000! on a MBP 2017 and nearly 100s to calculate 100,000!. Bravo!
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 #include &amp;lt;algorithm&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;iterator&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;vector&amp;gt; std::string multiply(std::string a, std::string b) { size_t size_a = a.</description>
    </item>
    
    <item>
      <title>Test of Randomness - Knuth Shuffle</title>
      <link>https://limingjie.github.io/posts/2019-07-18-knuth-shuffle/</link>
      <pubDate>Thu, 18 Jul 2019 20:05:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-18-knuth-shuffle/</guid>
      <description>Test of Randomness using a fixed seed. A fixed seed will generate fixed sequence of random numbers.
shuffle.go
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package shuffle import ( &amp;#34;math/rand&amp;#34; ) // Shuffle - Knuth Shuffle // https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle // &amp;gt; -- To shuffle an array a of n elements (indices 0.</description>
    </item>
    
    <item>
      <title>Algorithm: Array Summary Threshold</title>
      <link>https://limingjie.github.io/posts/2019-05-27-algorithm-summary-threshold/</link>
      <pubDate>Sun, 26 May 2019 22:00:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-05-27-algorithm-summary-threshold/</guid>
      <description>Question Given an array of integers $A (a_i \geq 0, i \in [0, n])$ and a threshold $T$.
If $\sum_{i = 0}^n a_i &amp;gt; T$, find an integer $t$, for $a_i &amp;gt; t (i \in [0, n]) \to a_i = t$.
Find the largest $t$ which makes $\sum_{i = 0}^n a_i \leq T$.
For Example, $A = [30, 20, 10, 50, 40],,,T = 127$. Expecting $t = 33$.
Answer ArraySummaryThreshold.go</description>
    </item>
    
    <item>
      <title>Golang Closure Exercise</title>
      <link>https://limingjie.github.io/posts/2019-05-25-golang-closure-exercise/</link>
      <pubDate>Sat, 25 May 2019 15:00:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-05-25-golang-closure-exercise/</guid>
      <description>I always had a question, if Golang does not have the static variable, how could it gracefully handle long lifetime variables except using global variables?
Until last night, I saw this Exercise: Fibonacci closure in A tour of Go. I have to admit I am not a fan of closure, sometimes it makes easy logic complex. But it is still great for learning.
Exercise: Fibonacci closure
Let&amp;rsquo;s have some fun with functions.</description>
    </item>
    
  </channel>
</rss>
