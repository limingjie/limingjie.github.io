<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mingjie Li</title>
    <link>https://limingjie.github.io/</link>
    <description>Recent content on Mingjie Li</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Jul 2019 00:39:00 +0800</lastBuildDate>
    
	<atom:link href="https://limingjie.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Rust Book Chapter 4.1 What is Ownership?</title>
      <link>https://limingjie.github.io/posts/2019-07-07-chapter-4.1-what-is-ownership/</link>
      <pubDate>Sun, 07 Jul 2019 00:39:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-07-chapter-4.1-what-is-ownership/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
This chapter starts to introduce memory management of rust language. Similar to mutability, rust simplified the copy and move behaviors and make them explicit in language, the advantage is to make it easy to find problems at compile time. I am looking forward to reading the next chapter on references and borrowing.</description>
    </item>
    
    <item>
      <title>The Rust Book Chapter 3.5 Control Flow</title>
      <link>https://limingjie.github.io/posts/2019-07-05-chapter-3.5-control-flow/</link>
      <pubDate>Fri, 05 Jul 2019 21:35:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-05-chapter-3.5-control-flow/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
if Expressions The condition must be a bool.
1 2 3 4 5 6 7 8 9 10 11 12 13  fn main(){letnumber=6;ifnumber%4==0{println!(&amp;#34;number is divisible by 4&amp;#34;);}elseifnumber%3==0{println!(&amp;#34;number is divisible by 3&amp;#34;);}elseifnumber%2==0{println!(&amp;#34;number is divisible by 2&amp;#34;);}else{println!(&amp;#34;number is not divisible by 4, 3, or 2&amp;#34;);}}   Using if in a let Statement if is an expression:exclamation: The value from each branch of the expression must be the same type.</description>
    </item>
    
    <item>
      <title>The Rust Book Chapter 3.3 Functions</title>
      <link>https://limingjie.github.io/posts/2019-07-05-chapter-3.3-functions/</link>
      <pubDate>Fri, 05 Jul 2019 21:20:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-05-chapter-3.3-functions/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
Use fn keyword to declare new functions. main function is the entry point of program.
Naming convention: snake_case.
1 2 3 4 5 6 7 8 9  fn main(){println!(&amp;#34;Hello, world!&amp;#34;);another_function();}fn another_function(){println!(&amp;#34;Another function.&amp;#34;);}   The order of function declarations do not matter, as long as they are defined somewhere.</description>
    </item>
    
    <item>
      <title>The Rust Book Chapter 3.2 Data Types</title>
      <link>https://limingjie.github.io/posts/2019-07-05-chapter-3.2-data-type/</link>
      <pubDate>Fri, 05 Jul 2019 21:00:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-05-chapter-3.2-data-type/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
Rust is a statically typed language. The compiler can usually infer what type we want to use based on the value and how we use it. In case when many types are possible, such as when we converted a String to a numeric type using parse, we must add type annotation, like this:</description>
    </item>
    
    <item>
      <title>The Rust Book Chapter 3.1 Variables and Mutability</title>
      <link>https://limingjie.github.io/posts/2019-07-04-chapter-3.1-variables-and-mutability/</link>
      <pubDate>Thu, 04 Jul 2019 23:35:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-04-chapter-3.1-variables-and-mutability/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
In Rust, by default variables are immutable (unchangeable).
Create a new project:
1  $ cargo new variables   src/main.rs :x:
1 2 3 4 5 6  fn main(){letx=0;println!(&amp;#34;The value of x = {}&amp;#34;,x);x=10;println!(&amp;#34;The value of x = {}&amp;#34;,x);}   Run the program:</description>
    </item>
    
    <item>
      <title>The Rust Book Chapter 1.3 Hello Cargo!</title>
      <link>https://limingjie.github.io/posts/2019-07-04-chapter-1.3-hello-cargo/</link>
      <pubDate>Thu, 04 Jul 2019 23:20:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-04-chapter-1.3-hello-cargo/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
Cargo Examples Check cargo installation 1 2  $ cargo --version cargo 1.36.0 (c4fcfb725 2019-05-15)   Create new project The command create a project directory, 2 files Cargo.toml, and src/main.ts. It also initialize the direction as a git repository.
1  $ cargo new hello_cargo   Cargo.</description>
    </item>
    
    <item>
      <title>The Rust Book Chapter 1.1 Getting Started with Rust</title>
      <link>https://limingjie.github.io/posts/2019-07-04-chapter-1.1-getting-started/</link>
      <pubDate>Thu, 04 Jul 2019 23:00:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-04-chapter-1.1-getting-started/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
Install Rust Install Rust using rustup.
1  $ curl https://sh.rustup.rs -sSf | sh   After installation, running rustc —version to check the installed version.
1 2  $ rustc --version rustc 1.36.0 (a53f9df32 2019-07-03)   Update installation by running rustup update, for more information see the rustup documentation.</description>
    </item>
    
    <item>
      <title>Typeset Pinyin in TeX</title>
      <link>https://limingjie.github.io/posts/2019-05-29-katex-pinyin/</link>
      <pubDate>Wed, 29 May 2019 23:50:59 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-05-29-katex-pinyin/</guid>
      <description>Use \atop  $$ \def\py#1#2{\text{\scriptsize{#2}}\atop\text{\;#1\;}} {\py{关}{gu\=an}} {\py{雎}{j\=u}} \\~\\ {\py{关}{gu\=an}} {\py{关}{gu\=an}} {\py{雎}{j\=u}} {\py{鸠}{ji\=u}} {\py{，}{}} {\py{在}{z\`ai}} {\py{河}{h\&#39;e}} {\py{之}{zh\=\i}} {\py{洲}{zh\=ou}} {\py{。}{}} \\~\\ {\py{窈}{y\v{a}o}} {\py{窕}{ti\v{a}o}} {\py{淑}{sh\=u}} {\py{女}{n\v{\&#34;u}}} {\py{，}{}} {\py{君}{j\=un}} {\py{子}{z\v\i}} {\py{好}{h\v{a}o}} {\py{逑}{qi\&#39;u}} {\py{。}{}} $$  1 2 3 4 5 6 7 8 9 10  \def\py#1#2{\text{\scriptsize{#2}}\atop\text{\;#1\;}} {\py{关}{gu\=an}} {\py{雎}{j\=u}} \\~\\ {\py{关}{gu\=an}} {\py{关}{gu\=an}} {\py{雎}{j\=u}} {\py{鸠}{ji\=u}} {\py{，}{}} {\py{在}{z\`ai}} {\py{河}{h\&amp;#39;e}} {\py{之}{zh\=\i}} {\py{洲}{zh\=ou}} {\py{。}{}} \\~\\ {\py{窈}{y\v{a}o}} {\py{窕}{ti\v{a}o}} {\py{淑}{sh\=u}} {\py{女}{n\v{\&amp;#34;u}}} {\py{，}{}} {\py{君}{j\=un}} {\py{子}{z\v\i}} {\py{好}{h\v{a}o}} {\py{逑}{qi\&amp;#39;u}} {\py{。}{}}   Use \overset  $$ \def\py#1#2{\overset\text{#2}\text{\;#1\;}} {\py{关}{gu\=an}} {\py{雎}{j\=u}} \\ {\py{关}{gu\=an}} {\py{关}{gu\=an}} {\py{雎}{j\=u}} {\py{鸠}{ji\=u}} ， {\py{在}{z\`ai}} {\py{河}{h\&#39;e}} {\py{之}{zh\=\i}} {\py{洲}{zh\=ou}} 。 \\ {\py{窈}{y\v{a}o}} {\py{窕}{ti\v{a}o}} {\py{淑}{sh\=u}} {\py{女}{n\v{\&#34;</description>
    </item>
    
    <item>
      <title>Render TeX in Hugo Blog</title>
      <link>https://limingjie.github.io/posts/2019-05-28-render-tex-in-hugo/</link>
      <pubDate>Wed, 29 May 2019 00:30:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-05-28-render-tex-in-hugo/</guid>
      <description>Recently, I started to think about learning $\TeX$, adding $\TeX$ support to blog looks like a good start for me. It took me quite some time to figure out all the culprits of embedding $\TeX$ in markdown. I hope this blog could save you some time before starting writing in $\TeX$.
Required Components  The default Blackfriday markdown engine. $\KaTeX$ math typesetting library for the web.  Steps to Setup $\KaTeX$ in Hugo $\KaTeX$ is an excellent fast engineer for rendering $\TeX$ on web.</description>
    </item>
    
    <item>
      <title>Algorithm: Array Summary Threshold</title>
      <link>https://limingjie.github.io/posts/2019-05-27-algorithm-summary-threshold/</link>
      <pubDate>Sun, 26 May 2019 22:00:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-05-27-algorithm-summary-threshold/</guid>
      <description>Question Given an array of integers $A (a_i \geq 0, i \in [0, n])$ and a threshold $T$.
If $\sum_{i = 0}^n a_i &amp;gt; T$, find an integer $t$, for $a_i &amp;gt; t (i \in [0, n]) \to a_i = t$.
Find the largest $t$ which makes $\sum_{i = 0}^n a_i \leq T$.
For Example, $A = [30, 20, 10, 50, 40],\,\,T = 127$. Expecting $t = 33$.
Answer ArraySummaryThreshold.</description>
    </item>
    
    <item>
      <title>Golang Closure Exercise</title>
      <link>https://limingjie.github.io/posts/2019-05-25-golang-closure-exercise/</link>
      <pubDate>Sat, 25 May 2019 15:00:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-05-25-golang-closure-exercise/</guid>
      <description>I always had a question, if Golang does not have the static variable, how could it gracefully handle long lifetime variables except using global variables?
Until last night, I saw this Exercise: Fibonacci closure in A tour of Go. I have to admit I am not a fan of closure, sometimes it makes easy logic complex. But it is still great for learning.
 Exercise: Fibonacci closure
Let&amp;rsquo;s have some fun with functions.</description>
    </item>
    
    <item>
      <title>My Mechanical Keyboards</title>
      <link>https://limingjie.github.io/posts/2019-05-01-my-mechanical-keyboards/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-05-01-my-mechanical-keyboards/</guid>
      <description>My very first impression of a mechanical keyboard is a clunky ISO layout IBM keyboard on which I learned touch typing, I can still remember it was full of noise like rusty sprints. Then suddenly, the whole world is dominated by membrane keyboards for its low cost and quiet experience.
As a fan of keyboards and mice. I owned Logitech mice M505, M525, and M545, guess what? I only paid the first one, they kept broken within the warranty and got replaced.</description>
    </item>
    
    <item>
      <title>M5Stack Traffic Light</title>
      <link>https://limingjie.github.io/posts/2019-04-10-m5stack-traffic-light/</link>
      <pubDate>Wed, 10 Apr 2019 22:10:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-04-10-m5stack-traffic-light/</guid>
      <description> A traffic light toy build on M5Stack. Find the source code on GitHub.
Customize The Traffic Light Find the traffic light sequence definition in TrafficLight.ino. Customize the sequence in lights array.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  // Traffic light struct typedef struct { int color_index; // 1 - Red, 2 - Yellow, 3 - Green  bool blink; unsigned long interval; // milliseconds } Traffic_Light; // Traffic light sequences Traffic_Light lights[] = { {3, false, 99999}, {3, true, 10999}, {2, true, 10999}, {1, false, 30999}, {1, true, 10999}};   </description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://limingjie.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://limingjie.github.io/about/</guid>
      <description> Experience  Software Engineering Manager &amp;middot; Everbridge Aug 2017 – Present &amp;middot; Beijing, China Software Development Manager &amp;middot; Oracle Dec 2015 – Aug 2017 &amp;middot; Beijing, China Principal Software Engineer &amp;middot; Oracle Mar 2011 – Dec 2015 &amp;middot; Beijing, China IT Specialist &amp;middot; IBM Mar 2006 – Mar 2011 &amp;middot; Dalian, China  Certifications  PMI Agile Certified Practitioner (PMI-ACP)® &amp;middot; Project Management Institute Issued Dec 2018 &amp;middot; Expires Dec 2021 See credential Project Management Professional (PMP)® &amp;middot; Project Management Institute Issued Mar 2018 &amp;middot; Expires Mar 2021 See credential  Patent  US10152590B2 - Implementing a WebSocket server to circumvent access controls, by a web browser, on a web application Issued Dec 11, 2018 See patent  </description>
    </item>
    
  </channel>
</rss>