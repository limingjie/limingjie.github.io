<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Mingjie Li</title>
    <link>https://limingjie.github.io/posts/</link>
    <description>Recent content in Posts on Mingjie Li</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Dec 2021 12:59:00 +0800</lastBuildDate><atom:link href="https://limingjie.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Convert Jupyter Notebook with CJK to PDF on Macos</title>
      <link>https://limingjie.github.io/posts/2021-12-28-convert-jupyter-notebook-with-cjk-to-pdf-on-macos/</link>
      <pubDate>Tue, 28 Dec 2021 12:59:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2021-12-28-convert-jupyter-notebook-with-cjk-to-pdf-on-macos/</guid>
      <description>Install Dependencies Follow nbconvert Installation Guide to install dependencies.
1 2 3  pip install nbconvert pip install pandoc brew install mactex   Install CJK Font Use system font or install any CJK font. I prefer Sarasa Gothic (更纱黑体 / 更紗黑體 / 更紗ゴシック / 사라사고딕).
1  brew install font-sarasa-gothic   Convert the Notebook to PDF   Convert the notebook to tex
1  jupyter nbconvert --to latex notebook-to-convert.</description>
    </item>
    
    <item>
      <title>Logic Gate Learning Kit</title>
      <link>https://limingjie.github.io/posts/2021-03-02-logic-gate-learning-kit/</link>
      <pubDate>Tue, 02 Mar 2021 23:00:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2021-03-02-logic-gate-learning-kit/</guid>
      <description>Build for my 5-year-old son to learn logic gates.
Logic Gate Learning Kit PCB Logic Gate Learning Kit Cheat Sheet PCB BOM    ID Name Comment Footprint Quantity     1 BATTERY 2xAA Battery BATTERY-HOLDER-2AA 1   2 HDR-F-2.54_1x2 Output Pin Sockets HDR-F-2.54_1X2 12   3 HDR-F-2.54_2x2 A/B/C Pin Sockets HDR-F-2.54_2X2 3   4 HDR-F-2.54_2x8 Fixed Pin Sockets HDR-F-2.54_2X8 2   5 HDR-M-2.</description>
    </item>
    
    <item>
      <title>Multiply Big Numbers</title>
      <link>https://limingjie.github.io/posts/2020-02-24-multiply-big-numbers/</link>
      <pubDate>Mon, 24 Feb 2020 23:00:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2020-02-24-multiply-big-numbers/</guid>
      <description>Multiply Strings I answered this LeetCode question many years ago and got a successful submission with a not too bad score.
Some code like this, I tried to make it easy to understand, well it might sacrifice some performance. The code takes less than 1s to calculate 10,000! on a MBP 2017 and nearly 100s to calculate 100,000!. Bravo!
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  #include &amp;lt;algorithm&amp;gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;iterator&amp;gt;#include &amp;lt;string&amp;gt;#include &amp;lt;vector&amp;gt; std::string multiply(std::string a, std::string b) { size_t size_a = a.</description>
    </item>
    
    <item>
      <title>温度</title>
      <link>https://limingjie.github.io/posts/2019-11-27-kid-temperature/</link>
      <pubDate>Wed, 27 Nov 2019 19:00:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-11-27-kid-temperature/</guid>
      <description>定义 维基百科 - 温度
 温度是表示物体冷热程度的物理量，微观上来讲是物体分子热运动的剧烈程度。
 典型温度    典型温度 温度值     水的冰点/熔点 0 °C   秋天的感觉 10°C   室温 20 - 25℃   夏天的感觉 30°C   人的体温 37℃   水的沸点 100 °C   太阳可见表面 5,505 °C    温度的测量 温度计，体温计。</description>
    </item>
    
    <item>
      <title>Test of Randomness - Knuth Shuffle</title>
      <link>https://limingjie.github.io/posts/2019-07-18-knuth-shuffle/</link>
      <pubDate>Thu, 18 Jul 2019 20:05:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-18-knuth-shuffle/</guid>
      <description>Test of Randomness using a fixed seed. A fixed seed will generate fixed sequence of random numbers.
shuffle.go
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  package shuffle import ( &amp;#34;math/rand&amp;#34; ) // Shuffle - Knuth Shuffle // https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle // &amp;gt; -- To shuffle an array a of n elements (indices 0.</description>
    </item>
    
    <item>
      <title>The Rust Book Chapter 5.3 Method Syntax</title>
      <link>https://limingjie.github.io/posts/2019-07-09-chapter-5.3-method-syntax/</link>
      <pubDate>Tue, 09 Jul 2019 23:10:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-09-chapter-5.3-method-syntax/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
 Defining Methods 1 2 3 4 5 6 7 8 9 10  struct Rectangle{width: u32,height: u32,}implRectangle{fn area(&amp;amp;self)-&amp;gt; u32 {self.width*self.height}}  The reason for explicitly self is flexible type.
 &amp;amp;self - reading &amp;amp;mut self - mutating self - consuming. Having a method that takes ownership of the instance by using just selfas the first parameter is rare; this technique is usually used when the method transforms self into something else and you want to prevent the caller from using the original instance after the transformation.</description>
    </item>
    
    <item>
      <title>The Rust Book Chapter 5.1 Defining and Instantiating Structs</title>
      <link>https://limingjie.github.io/posts/2019-07-09-chapter-5.1-defining-and-instantiating-structs/</link>
      <pubDate>Tue, 09 Jul 2019 22:30:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-09-chapter-5.1-defining-and-instantiating-structs/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
 Structs are similar to tuples.
 Each field can be a different type. Each field has a name, do not have to rely on the order to access the values.  Define struct.
1 2 3 4 5 6  struct User{username: String,email: String,sign_in_count: u64,active: bool,}  Create an instance of the struct.</description>
    </item>
    
    <item>
      <title>The Rust Book Chapter 4.3 The Slice Type</title>
      <link>https://limingjie.github.io/posts/2019-07-08-chapter-4.3-the-slices-type/</link>
      <pubDate>Mon, 08 Jul 2019 23:59:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-08-chapter-4.3-the-slices-type/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
 Slice references a contiguous sequence of elements in a collection rather than the whole collection, it does not have ownership.
Take a string as an example, using index to save specific position is not safe, if the string is cleared, the index is still valid but pointing to invalid data.</description>
    </item>
    
    <item>
      <title>The Rust Book Chapter 4.2 References and Borrowing</title>
      <link>https://limingjie.github.io/posts/2019-07-08-chapter-4.2-references-and-borrowing/</link>
      <pubDate>Mon, 08 Jul 2019 21:00:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-08-chapter-4.2-references-and-borrowing/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
 Because of the ownership rule: there can only be one owner at a time. Here are the 2 valid ways of using variable as an argument.
 Transfer the ownership, then transfer it back. Borrow by reference.  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  fn main(){lets1=String::from(&amp;#34;Hello&amp;#34;);let(s1,len)=calculate_length_by_move(s1);println!</description>
    </item>
    
    <item>
      <title>The Rust Book Chapter 4.1 What is Ownership?</title>
      <link>https://limingjie.github.io/posts/2019-07-07-chapter-4.1-what-is-ownership/</link>
      <pubDate>Sun, 07 Jul 2019 00:39:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-07-chapter-4.1-what-is-ownership/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
This chapter starts to introduce memory management of rust language. Similar to mutability, rust simplified the copy and move behaviors and make them explicit in language, the advantage is to make it easy to find problems at compile time. I am looking forward to reading the next chapter on references and borrowing.</description>
    </item>
    
    <item>
      <title>The Rust Book Chapter 3.5 Control Flow</title>
      <link>https://limingjie.github.io/posts/2019-07-05-chapter-3.5-control-flow/</link>
      <pubDate>Fri, 05 Jul 2019 21:35:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-05-chapter-3.5-control-flow/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
 if Expressions The condition must be a bool.
1 2 3 4 5 6 7 8 9 10 11 12 13  fn main(){letnumber=6;ifnumber%4==0{println!(&amp;#34;number is divisible by 4&amp;#34;);}elseifnumber%3==0{println!(&amp;#34;number is divisible by 3&amp;#34;);}elseifnumber%2==0{println!(&amp;#34;number is divisible by 2&amp;#34;);}else{println!(&amp;#34;number is not divisible by 4, 3, or 2&amp;#34;);}}  Using if in a let Statement if is an expression:exclamation: The value from each branch of the expression must be the same type.</description>
    </item>
    
    <item>
      <title>The Rust Book Chapter 3.3 Functions</title>
      <link>https://limingjie.github.io/posts/2019-07-05-chapter-3.3-functions/</link>
      <pubDate>Fri, 05 Jul 2019 21:20:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-05-chapter-3.3-functions/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
 Use fn keyword to declare new functions. main function is the entry point of program.
Naming convention: snake_case.
1 2 3 4 5 6 7 8 9  fn main(){println!(&amp;#34;Hello, world!&amp;#34;);another_function();}fn another_function(){println!(&amp;#34;Another function.&amp;#34;);}  The order of function declarations do not matter, as long as they are defined somewhere.</description>
    </item>
    
    <item>
      <title>The Rust Book Chapter 3.2 Data Types</title>
      <link>https://limingjie.github.io/posts/2019-07-05-chapter-3.2-data-type/</link>
      <pubDate>Fri, 05 Jul 2019 21:00:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-05-chapter-3.2-data-type/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
 Rust is a statically typed language. The compiler can usually infer what type we want to use based on the value and how we use it. In case when many types are possible, such as when we converted a String to a numeric type using parse, we must add type annotation, like this:</description>
    </item>
    
    <item>
      <title>The Rust Book Chapter 3.1 Variables and Mutability</title>
      <link>https://limingjie.github.io/posts/2019-07-04-chapter-3.1-variables-and-mutability/</link>
      <pubDate>Thu, 04 Jul 2019 23:35:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-04-chapter-3.1-variables-and-mutability/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
 In Rust, by default variables are immutable (unchangeable).
Create a new project:
1  $ cargo new variables   src/main.rs :x:
1 2 3 4 5 6  fn main(){letx=0;println!(&amp;#34;The value of x = {}&amp;#34;,x);x=10;println!(&amp;#34;The value of x = {}&amp;#34;,x);}  Run the program:</description>
    </item>
    
    <item>
      <title>The Rust Book Chapter 1.3 Hello Cargo!</title>
      <link>https://limingjie.github.io/posts/2019-07-04-chapter-1.3-hello-cargo/</link>
      <pubDate>Thu, 04 Jul 2019 23:20:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-04-chapter-1.3-hello-cargo/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
 Cargo Examples Check cargo installation 1 2  $ cargo --version cargo 1.36.0 (c4fcfb725 2019-05-15)   Create new project The command create a project directory, 2 files Cargo.toml, and src/main.ts. It also initialize the direction as a git repository.
1  $ cargo new hello_cargo   Cargo.</description>
    </item>
    
    <item>
      <title>The Rust Book Chapter 1.1 Getting Started with Rust</title>
      <link>https://limingjie.github.io/posts/2019-07-04-chapter-1.1-getting-started/</link>
      <pubDate>Thu, 04 Jul 2019 23:00:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-04-chapter-1.1-getting-started/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
 Install Rust Install Rust using rustup.
1  $ curl https://sh.rustup.rs -sSf | sh   After installation, running rustc —version to check the installed version.
1 2  $ rustc --version rustc 1.36.0 (a53f9df32 2019-07-03)   Update installation by running rustup update, for more information see the rustup documentation.</description>
    </item>
    
    <item>
      <title>Typeset Pinyin in TeX</title>
      <link>https://limingjie.github.io/posts/2019-05-29-katex-pinyin/</link>
      <pubDate>Wed, 29 May 2019 23:50:59 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-05-29-katex-pinyin/</guid>
      <description>Use \atop  $$ \def\py#1#2{\text{\scriptsize{#2}}\atop\text{\;#1\;}} {\py{关}{gu\=an}} {\py{雎}{j\=u}} \\~\\ {\py{关}{gu\=an}} {\py{关}{gu\=an}} {\py{雎}{j\=u}} {\py{鸠}{ji\=u}} {\py{，}{}} {\py{在}{z\`ai}} {\py{河}{h\&#39;e}} {\py{之}{zh\=\i}} {\py{洲}{zh\=ou}} {\py{。}{}} \\~\\ {\py{窈}{y\v{a}o}} {\py{窕}{ti\v{a}o}} {\py{淑}{sh\=u}} {\py{女}{n\v{\&#34;u}}} {\py{，}{}} {\py{君}{j\=un}} {\py{子}{z\v\i}} {\py{好}{h\v{a}o}} {\py{逑}{qi\&#39;u}} {\py{。}{}} $$  1 2 3 4 5 6 7 8 9 10  \def\py#1#2{\text{\scriptsize{#2}}\atop\text{\;#1\;}} {\py{关}{gu\=an}} {\py{雎}{j\=u}} \\~\\ {\py{关}{gu\=an}} {\py{关}{gu\=an}} {\py{雎}{j\=u}} {\py{鸠}{ji\=u}} {\py{，}{}} {\py{在}{z\`ai}} {\py{河}{h\&amp;#39;e}} {\py{之}{zh\=\i}} {\py{洲}{zh\=ou}} {\py{。}{}} \\~\\ {\py{窈}{y\v{a}o}} {\py{窕}{ti\v{a}o}} {\py{淑}{sh\=u}} {\py{女}{n\v{\&amp;#34;u}}} {\py{，}{}} {\py{君}{j\=un}} {\py{子}{z\v\i}} {\py{好}{h\v{a}o}} {\py{逑}{qi\&amp;#39;u}} {\py{。}{}}   Use \overset  $$ \def\py#1#2{\overset{\text{#2}}{\text{\;#1\;}}} {\py{关}{gu\=an}} {\py{雎}{j\=u}} \\ {\py{关}{gu\=an}} {\py{关}{gu\=an}} {\py{雎}{j\=u}} {\py{鸠}{ji\=u}} ， {\py{在}{z\`ai}} {\py{河}{h\&#39;e}} {\py{之}{zh\=\i}} {\py{洲}{zh\=ou}} 。 \\ {\py{窈}{y\v{a}o}} {\py{窕}{ti\v{a}o}} {\py{淑}{sh\=u}} {\py{女}{n\v{\&#34;</description>
    </item>
    
    <item>
      <title>Render TeX in Hugo Blog</title>
      <link>https://limingjie.github.io/posts/2019-05-28-render-tex-in-hugo/</link>
      <pubDate>Wed, 29 May 2019 00:30:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-05-28-render-tex-in-hugo/</guid>
      <description>Recently, I started to think about learning $\TeX$, adding $\TeX$ support to blog looks like a good start for me. It took me quite some time to figure out all the culprits of embedding $\TeX$ in markdown. I hope this blog could save you some time before starting writing in $\TeX$.
 Note: Some contents in this post is outdated. Hugo markdown engine moved from Blackfriday to Goldmark.
 Required Components  The default Blackfriday markdown engine.</description>
    </item>
    
    <item>
      <title>Algorithm: Array Summary Threshold</title>
      <link>https://limingjie.github.io/posts/2019-05-27-algorithm-summary-threshold/</link>
      <pubDate>Sun, 26 May 2019 22:00:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-05-27-algorithm-summary-threshold/</guid>
      <description>Question Given an array of integers $A (a_i \geq 0, i \in [0, n])$ and a threshold $T$.
If $\sum_{i = 0}^n a_i &amp;gt; T$, find an integer $t$, for $a_i &amp;gt; t (i \in [0, n]) \to a_i = t$.
Find the largest $t$ which makes $\sum_{i = 0}^n a_i \leq T$.
For Example, $A = [30, 20, 10, 50, 40],,,T = 127$. Expecting $t = 33$.
Answer ArraySummaryThreshold.go</description>
    </item>
    
    <item>
      <title>Golang Closure Exercise</title>
      <link>https://limingjie.github.io/posts/2019-05-25-golang-closure-exercise/</link>
      <pubDate>Sat, 25 May 2019 15:00:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-05-25-golang-closure-exercise/</guid>
      <description>I always had a question, if Golang does not have the static variable, how could it gracefully handle long lifetime variables except using global variables?
Until last night, I saw this Exercise: Fibonacci closure in A tour of Go. I have to admit I am not a fan of closure, sometimes it makes easy logic complex. But it is still great for learning.
 Exercise: Fibonacci closure
Let&amp;rsquo;s have some fun with functions.</description>
    </item>
    
    <item>
      <title>My Mechanical Keyboards</title>
      <link>https://limingjie.github.io/posts/2019-05-01-my-mechanical-keyboards/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-05-01-my-mechanical-keyboards/</guid>
      <description>My very first impression of a mechanical keyboard is a clunky ISO layout IBM keyboard on which I learned touch typing, I can still remember it was full of noise like rusty sprints. Then suddenly, the whole world is dominated by membrane keyboards for its low cost and quiet experience.
As a fan of keyboards and mice. I owned Logitech mice M505, M525, and M545, guess what? I only paid the first one, they kept broken within the warranty and got replaced.</description>
    </item>
    
    <item>
      <title>M5Stack Traffic Light</title>
      <link>https://limingjie.github.io/posts/2019-04-10-m5stack-traffic-light/</link>
      <pubDate>Wed, 10 Apr 2019 22:10:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-04-10-m5stack-traffic-light/</guid>
      <description>A traffic light toy build on M5Stack. Find the source code on GitHub.
Customize The Traffic Light Find the traffic light sequence definition in TrafficLight.ino. Customize the sequence in lights array.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  // Traffic light struct typedef struct { int color_index; // 1 - Red, 2 - Yellow, 3 - Green  bool blink; unsigned long interval; // milliseconds } Traffic_Light; // Traffic light sequences Traffic_Light lights[] = { {3, false, 99999}, {3, true, 10999}, {2, true, 10999}, {1, false, 30999}, {1, true, 10999}};   </description>
    </item>
    
  </channel>
</rss>
