<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Mingjie Li</title>
    <link>https://limingjie.github.io/categories/golang/</link>
    <description>Recent content in Golang on Mingjie Li</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 May 2019 15:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://limingjie.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang Closure Exercise</title>
      <link>https://limingjie.github.io/posts/2019-05-25-golang-closure-exercise/</link>
      <pubDate>Sat, 25 May 2019 15:00:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-05-25-golang-closure-exercise/</guid>
      <description>I always had a question, if Golang does not have the static variable, how could it gracefully handle long lifetime variables except using global variables?
Until last night, I saw this Exercise: Fibonacci closure in A tour of Go. I have to admit I am not a fan of closure, sometimes it makes easy logic complex. But it is still great for learning.
 Exercise: Fibonacci closure
Let&amp;rsquo;s have some fun with functions.</description>
    </item>
    
  </channel>
</rss>