<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on Mingjie Li</title>
    <link>https://limingjie.github.io/categories/rust/</link>
    <description>Recent content in Rust on Mingjie Li</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Jul 2019 23:10:00 +0800</lastBuildDate>
    
	<atom:link href="https://limingjie.github.io/categories/rust/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Rust Book Chapter 5.3 Method Syntax</title>
      <link>https://limingjie.github.io/posts/2019-07-09-chapter-5.3-method-syntax/</link>
      <pubDate>Tue, 09 Jul 2019 23:10:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-09-chapter-5.3-method-syntax/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
Defining Methods 1 2 3 4 5 6 7 8 9 10  struct Rectangle{width: u32,height: u32,}implRectangle{fn area(&amp;amp;self)-&amp;gt; u32 {self.width*self.height}}   The reason for explicitly self is flexible type.
 &amp;amp;self - reading &amp;amp;mut self - mutating self - consuming. Having a method that takes ownership of the instance by using just selfas the first parameter is rare; this technique is usually used when the method transforms self into something else and you want to prevent the caller from using the original instance after the transformation.</description>
    </item>
    
    <item>
      <title>The Rust Book Chapter 5.1 Defining and Instantiating Structs</title>
      <link>https://limingjie.github.io/posts/2019-07-09-chapter-5.1-defining-and-instantiating-structs/</link>
      <pubDate>Tue, 09 Jul 2019 22:30:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-09-chapter-5.1-defining-and-instantiating-structs/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
Structs are similar to tuples.
 Each field can be a different type. Each field has a name, do not have to rely on the order to access the values.  Define struct.
1 2 3 4 5 6  struct User{username: String,email: String,sign_in_count: u64,active: bool,}   Create an instance of the struct.</description>
    </item>
    
    <item>
      <title>The Rust Book Chapter 4.3 The Slice Type</title>
      <link>https://limingjie.github.io/posts/2019-07-08-chapter-4.3-the-slices-type/</link>
      <pubDate>Mon, 08 Jul 2019 23:59:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-08-chapter-4.3-the-slices-type/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
Slice references a contiguous sequence of elements in a collection rather than the whole collection, it does not have ownership.
Take a string as an example, using index to save specific position is not safe, if the string is cleared, the index is still valid but pointing to invalid data.</description>
    </item>
    
    <item>
      <title>The Rust Book Chapter 4.2 References and Borrowing</title>
      <link>https://limingjie.github.io/posts/2019-07-08-chapter-4.2-references-and-borrowing/</link>
      <pubDate>Mon, 08 Jul 2019 21:00:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-08-chapter-4.2-references-and-borrowing/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
Because of the ownership rule: there can only be one owner at a time. Here are the 2 valid ways of using variable as an argument.
 Transfer the ownership, then transfer it back. Borrow by reference.  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  fn main(){lets1=String::from(&amp;#34;Hello&amp;#34;);let(s1,len)=calculate_length_by_move(s1);println!</description>
    </item>
    
    <item>
      <title>The Rust Book Chapter 4.1 What is Ownership?</title>
      <link>https://limingjie.github.io/posts/2019-07-07-chapter-4.1-what-is-ownership/</link>
      <pubDate>Sun, 07 Jul 2019 00:39:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-07-chapter-4.1-what-is-ownership/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
This chapter starts to introduce memory management of rust language. Similar to mutability, rust simplified the copy and move behaviors and make them explicit in language, the advantage is to make it easy to find problems at compile time. I am looking forward to reading the next chapter on references and borrowing.</description>
    </item>
    
    <item>
      <title>The Rust Book Chapter 3.5 Control Flow</title>
      <link>https://limingjie.github.io/posts/2019-07-05-chapter-3.5-control-flow/</link>
      <pubDate>Fri, 05 Jul 2019 21:35:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-05-chapter-3.5-control-flow/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
if Expressions The condition must be a bool.
1 2 3 4 5 6 7 8 9 10 11 12 13  fn main(){letnumber=6;ifnumber%4==0{println!(&amp;#34;number is divisible by 4&amp;#34;);}elseifnumber%3==0{println!(&amp;#34;number is divisible by 3&amp;#34;);}elseifnumber%2==0{println!(&amp;#34;number is divisible by 2&amp;#34;);}else{println!(&amp;#34;number is not divisible by 4, 3, or 2&amp;#34;);}}   Using if in a let Statement if is an expression:exclamation: The value from each branch of the expression must be the same type.</description>
    </item>
    
    <item>
      <title>The Rust Book Chapter 3.3 Functions</title>
      <link>https://limingjie.github.io/posts/2019-07-05-chapter-3.3-functions/</link>
      <pubDate>Fri, 05 Jul 2019 21:20:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-05-chapter-3.3-functions/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
Use fn keyword to declare new functions. main function is the entry point of program.
Naming convention: snake_case.
1 2 3 4 5 6 7 8 9  fn main(){println!(&amp;#34;Hello, world!&amp;#34;);another_function();}fn another_function(){println!(&amp;#34;Another function.&amp;#34;);}   The order of function declarations do not matter, as long as they are defined somewhere.</description>
    </item>
    
    <item>
      <title>The Rust Book Chapter 3.2 Data Types</title>
      <link>https://limingjie.github.io/posts/2019-07-05-chapter-3.2-data-type/</link>
      <pubDate>Fri, 05 Jul 2019 21:00:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-05-chapter-3.2-data-type/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
Rust is a statically typed language. The compiler can usually infer what type we want to use based on the value and how we use it. In case when many types are possible, such as when we converted a String to a numeric type using parse, we must add type annotation, like this:</description>
    </item>
    
    <item>
      <title>The Rust Book Chapter 3.1 Variables and Mutability</title>
      <link>https://limingjie.github.io/posts/2019-07-04-chapter-3.1-variables-and-mutability/</link>
      <pubDate>Thu, 04 Jul 2019 23:35:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-04-chapter-3.1-variables-and-mutability/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
In Rust, by default variables are immutable (unchangeable).
Create a new project:
1  $ cargo new variables   src/main.rs :x:
1 2 3 4 5 6  fn main(){letx=0;println!(&amp;#34;The value of x = {}&amp;#34;,x);x=10;println!(&amp;#34;The value of x = {}&amp;#34;,x);}   Run the program:</description>
    </item>
    
    <item>
      <title>The Rust Book Chapter 1.3 Hello Cargo!</title>
      <link>https://limingjie.github.io/posts/2019-07-04-chapter-1.3-hello-cargo/</link>
      <pubDate>Thu, 04 Jul 2019 23:20:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-04-chapter-1.3-hello-cargo/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
Cargo Examples Check cargo installation 1 2  $ cargo --version cargo 1.36.0 (c4fcfb725 2019-05-15)   Create new project The command create a project directory, 2 files Cargo.toml, and src/main.ts. It also initialize the direction as a git repository.
1  $ cargo new hello_cargo   Cargo.</description>
    </item>
    
    <item>
      <title>The Rust Book Chapter 1.1 Getting Started with Rust</title>
      <link>https://limingjie.github.io/posts/2019-07-04-chapter-1.1-getting-started/</link>
      <pubDate>Thu, 04 Jul 2019 23:00:00 +0800</pubDate>
      
      <guid>https://limingjie.github.io/posts/2019-07-04-chapter-1.1-getting-started/</guid>
      <description>This is my notes of learning The Rust Book from a C++ programmer&amp;rsquo;s perspective, it is recommended to read the book online or offline by command rustup doc.
Install Rust Install Rust using rustup.
1  $ curl https://sh.rustup.rs -sSf | sh   After installation, running rustc —version to check the installed version.
1 2  $ rustc --version rustc 1.36.0 (a53f9df32 2019-07-03)   Update installation by running rustup update, for more information see the rustup documentation.</description>
    </item>
    
  </channel>
</rss>